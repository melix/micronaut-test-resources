plugins {
    id 'io.micronaut.build.internal.server-module'
    // server uses kafka in tests
    id 'io.micronaut.build.internal.kafka-testing'
    alias(libs.plugins.micronaut.miniapp)
    alias(libs.plugins.micronaut.aot)
}

description = """
A lightweight server which runs a VM responsible for hosting
test resource resolvers.
This server must be used in conjunction with the test resources
client.
"""

dependencies {
    implementation(mn.micronaut.http.server.netty)
    implementation(mn.reactor)
    implementation(project(':micronaut-test-resources-core'))
    implementation(project(':micronaut-test-resources-embedded'))
    implementation(project(':micronaut-test-resources-testcontainers'))
    implementation(project(':micronaut-test-resources-codec'))
    runtimeOnly(mnLogging.logback.classic)
    runtimeOnly(mn.micronaut.management)

    testImplementation(mn.micronaut.http.client)
    testImplementation(project(':micronaut-test-resources-client'))
    testRuntimeOnly(project(':micronaut-test-resources-kafka'))

    // For logback conversion
    aotPlugins(mnLogging.logback.classic)
    aotPlugins("org.fusesource.jansi:jansi:1.18")
}

application {
    mainClass = "io.micronaut.testresources.server.TestResourcesService"
}

micronaut {
    version = libs.versions.micronaut.platform.get()
    aot {
        version = libs.versions.micronaut.aot.get()
        cacheEnvironment.set(true)
        optimizeServiceLoading.set(true)
        optimizeClassLoading.set(true)
        convertYamlToJava.set(false)
        precomputeOperations.set(true)
        deduceEnvironment.set(true)
        // We have to set it to false because the generated
        // Java configuration is somehow wrong and generates
        // duplicate log lines
        replaceLogbackXml.set(false)
        configFile.set(file("src/aot/aot.properties"))
    }
}

micronautBuild {
    binaryCompatibility {
        // binary checks work on the wrong jar file
        enabled = false
    }
}
