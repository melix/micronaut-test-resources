plugins {
    id 'io.micronaut.build.internal.server-module'
    // server uses kafka in tests
    id 'io.micronaut.build.internal.kafka-testing'
    alias(libs.plugins.micronaut.miniapp)
    alias(libs.plugins.micronaut.aot)
}

description = """
A lightweight server which runs a VM responsible for hosting
test resource resolvers.
This server must be used in conjunction with the test resources
client.
"""

dependencies {
    implementation(mn.micronaut.http.server.netty)
    implementation(mn.reactor)
    implementation(project(':micronaut-test-resources-core'))
    implementation(project(':micronaut-test-resources-embedded'))
    implementation(project(':micronaut-test-resources-testcontainers'))
    runtimeOnly(mn.logback.classic)
    runtimeOnly(mn.micronaut.management)
    runtimeOnly(mnSerde.micronaut.serde.jackson)
    runtimeOnly(mn.snakeyaml)

    testImplementation(project(':micronaut-test-resources-client'))
    testRuntimeOnly(project(':micronaut-test-resources-kafka'))

    // For logback conversion
    aotPlugins(mn.logback.classic)
    aotPlugins("org.fusesource.jansi:jansi:1.18")
    aotPlugins(mn.snakeyaml)
}

application {
    mainClass = "io.micronaut.testresources.server.TestResourcesService"
}

micronaut {
    aot {
        version = '2.0.0-SNAPSHOT'
        cacheEnvironment.set(true)
        optimizeServiceLoading.set(true)
        optimizeClassLoading.set(true)
        convertYamlToJava.set(true)
        precomputeOperations.set(true)
        deduceEnvironment.set(true)
        // Workaround for an AOT conversion bug
        replaceLogbackXml.set(false)
    }
}

micronautBuild {
    binaryCompatibility {
        // binary checks work on the wrong jar file
        enabled = false
    }
}

// This will only be required until we build
// the test resources server with Micronaut Gradle Plugin 4.0.0
configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute platform(module("io.micronaut:micronaut-bom")) using platform(module("io.micronaut.platform:micronaut-platform:${libs.versions.micronaut.asProvider().get()}"))
        }
    }
}
